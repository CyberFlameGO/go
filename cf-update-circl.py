#!/usr/bin/env python3
#
# cf-update-circl.py updates the CIRCL package in src/circl.
import os
import sys
import tempfile
import subprocess

# Name of the CIRCL package as it will appear in the standard library.
circl_name = 'circl'

# The git repository form which CIRCL will be cloned.
circl_repo = 'https://github.com/cloudflare/circl'

# The git branch to checkout.
circl_branch = 'master'

# The set of CIRCL packages that the standard library depends on.
circl_pkg_dir = [
  'circl',
  'circl/ecc/goldilocks',
  'circl/dh/sidh',
  'circl/dh/sidh/internal/common',
  'circl/dh/sidh/internal/p434',
  'circl/dh/sidh/internal/p503',
  'circl/dh/sidh/internal/p751',
  'circl/internal/conv',
  'circl/internal/sha3',
  'circl/internal/test',
  'circl/math',
  'circl/math/fp25519',
  'circl/math/fp448',
  'circl/math/mlsbset',
  'circl/pki',
  'circl/sign',
  'circl/sign/dilithium/internal/common',
  'circl/sign/dilithium/internal/common/params',
  'circl/sign/dilithium/mode3',
  'circl/sign/dilithium/mode3/internal',
  'circl/sign/dilithium/mode4',
  'circl/sign/dilithium/mode4/internal',
  'circl/sign/ed25519',
  'circl/sign/ed448',
  'circl/sign/eddilithium3',
  'circl/sign/eddilithium4',
  'circl/sign/schemes',
  'circl/simd/keccakf1600',
]

# The directories of test data required for CIRCL unit tests.
circl_testdata_dir = [
  'circl/dh/sidh/testdata',
  'circl/internal/sha3/testdata',
  'circl/sign/ed25519/testdata',
  'circl/sign/ed448/testdata',
]

# Miscellaneous files to copy from CIRCL.
circl_misc_file = [
  'circl/LICENSE',
]

src = os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), 'src')
src_circl = os.path.join(src, circl_name)

# Returns true if fn is a source file for CIRCL. Currently this includes Go
# sources code, C header files, and ASM source code.
def is_pkg_file(fn):
    ok = False
    for suffix in ['go', 'h', 's']:
      ok |= fn.endswith('.' + suffix)
    return ok

# Modifies file fn by replacing imports with the corresponding package in the
# standard library.
def handle_pkg_file(fn):
    # Fix Go imports.
    if fn.endswith('.go'):
        with open(fn, 'r') as f:
            s = f.read()
        s = s.replace(
            'github.com/cloudflare/circl',
            circl_name,
        ).replace(
            'golang.org/x/sys/cpu',
            'internal/cpu',
        )
        with open(fn, 'w') as f:
            f.write(s)

pkg_readme_template = '''
THIS CODE WAS GENERATED BY cf-update-circl.py.

It was checked out from "{0}"
on branch "{1}". Latest commit:
'''

# Remove existing CIRCL package.
if os.path.exists(src_circl):
    print(f"Removing existing {src_circl}")
    subprocess.check_call(['rm', '-r', '-f', src_circl])

# Clone and copy new CIRCL package.
with tempfile.TemporaryDirectory() as tmp:
    pkg = {
        os.path.join(*d.split('/')) : False for d in circl_pkg_dir
    }

    testdata = {
        os.path.join(*d.split('/')) : False for d in circl_testdata_dir
    }

    misc = {
        os.path.join(*f.split('/')) : False for f in circl_misc_file
    }

    print(f"Cloning {circl_repo} branch {circl_branch} ...")
    subprocess.check_call(['git', 'clone',
        circl_repo,
        '--branch', circl_branch,
        '--depth', '1',
        circl_name,
    ], cwd=tmp)

    print(f"Creating new {src_circl} ...")
    for subdir, _, files in os.walk(os.path.join(tmp, circl_name)):
        d = os.path.relpath(subdir, tmp)
        copied = set()

        # Handle and copy package files,
        if d in pkg.keys():
            pkg[d] = True
            subprocess.check_call(['mkdir', '-p',
                os.path.join(src, d),
            ])
            for f in files:
                if is_pkg_file(f):
                    handle_pkg_file(os.path.join(subdir, f))
                    subprocess.check_call(['cp',
                        os.path.join(subdir, f),
                        os.path.join(src, d, f),
                    ])
                    copied.add(f)

        # Copy test data.
        if d in testdata.keys():
            testdata[d] = True
            subprocess.check_call(['cp', '-r',
                subdir,
                os.path.join(src, d),
            ])
            for f in files:
              copied.add(f)

        # Copy miscellaneous files.
        for f in files:
            k = os.path.join(d, f)
            if k in misc.keys():
                misc[k] = True
                subprocess.check_call(['cp',
                    os.path.join(subdir, f),
                    os.path.join(src, d, f),
                ])
                copied.add(f)

        if len(copied) == 0:
            print(f'Skipped directory "{d}"')
        else:
            for f in set(files).difference(copied):
                print(f'Skipped file "{d}/{f}"')


    for (d, v) in pkg.items():
        if not v:
            print(f'WARNING: package "{d}" not found in CIRCL repo', file=sys.stderr)

    for (d, v) in testdata.items():
        if not v:
            print(f'WARNING: test data "{d}" not found in CIRCL repo', file=sys.stderr)

    for (f, v) in misc.items():
        if not v:
            print(f'WARNING: file "{f}" not found in CIRCL repo', file=sys.stderr)

    print(f"Creating README ...")
    with open(os.path.join(src_circl, 'README'), 'w') as f:
        readme = subprocess.check_output(['git', 'log',
            '-n1',
            '--format=fuller',
        ], cwd=os.path.join(tmp, circl_name), universal_newlines=True)
        readme = '\n'.join([f'  {l}' for l in readme.split('\n')])
        readme = '\n'.join([
            pkg_readme_template.format(circl_repo, circl_branch),
            readme,
        ])
        readme += '\n'
        f.write(readme)

# Run go fmt on the new CIRCL package.
print("Formatting ...")
subprocess.check_call(['go', 'fmt', './...'],
    cwd=src_circl,
    stdout=subprocess.DEVNULL,
)
